Procedure pour installer postgresql sur une debian,
La derniere version 9.3, ne sera pas installée si le kernel est a la version 3.2 :(
alternative, installer la version 9.1

# Get 9.3 on ubuntu < 14.04
# wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | \
#      sudo apt-key add -
#      sudo echo "deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main" | \
#           sudo tee /etc/apt/sources.list.d/pgdg.list
#           sudo apt-get update

# Install on any Ubuntu
# sudo apt-get install -y postgresql postgresql-contrib

NB:
pour mettre a jour postgresql, il faudra
- editer le fichier /etc/apt/sources.list.d/pgdg.list
- et sur la ligne "deb http://apt.postgresql.org/pub/repos/apt/ trusty-pgdg main"
- remplacer trusty par un nom de distribution plus recente, par exemple: jessie
- ensuite faire un apt update suivi d'un apt upgrade

Eventuel warning declenchés par la maj, warning du a mon utilisation de postgis:
postgis (2.2.0~rc1+dfsg-1~exp2) experimental; urgency=medium

  Debian is now shipping PostGIS version 2.2 and dropped support for 2.1,
  meaning bug or security fixes will no longer be provided for the older
  one. This means it is strongly recommended to migrate all databases to the
  newer PostGIS version 2.2 as soon as possible.

  Of course, databases that are already using PostGIS 2.1 will continue to
  work. Note, however, that with this upgrade it is no longer possible
  to create version 2.1 of the extension PostGIS. Instead, 'CREATE
  EXTENSION postgis;' will now give you version 2.2. Note that this can also
  affects backups.

 -- Markus Wanner <markus@bluegap.ch>  Sat, 26 Sep 2015 16:07:18 +0200

Si tout s'est bien passé, je devrais avoir un ecran a peu pres semblable a ceci:

update-alternatives: utilisation de « /usr/share/postgresql/9.5/man/man1/psql.1.gz » pour fournir « /usr/share/man/man1/psql.1.gz » (psql.1.gz) en mode automatique
Paramétrage de postgresql-9.5 (9.5.1-1.pgdg80+1) ...
Creating new cluster 9.5/main ...
  config /etc/postgresql/9.5/main
  data   /var/lib/postgresql/9.5/main
  locale fr_FR.UTF-8
  socket /var/run/postgresql
  port   5434
update-alternatives: utilisation de « /usr/share/postgresql/9.5/man/man1/postmaster.1.gz » pour fournir « /usr/share/man/man1/postmaster.1.gz » (postmaster.1.gz) en mode automatique
Paramétrage de postgresql-9.5-postgis-scripts (2.2.1+dfsg-2.pgdg80+1) ...
Paramétrage de postgresql-9.5-postgis-2.2 (2.2.1+dfsg-2.pgdg80+1) ...
Paramétrage de postgresql-contrib-9.5 (9.5.1-1.pgdg80+1) ...
Paramétrage de postgresql-doc-9.4 (9.4.6-1.pgdg80+1) ...
Paramétrage de postgresql-server-dev-9.1 (9.1.20-1.pgdg80+1) ...
Paramétrage de postgresql-server-dev-9.2 (9.2.15-1.pgdg80+1) ...
Paramétrage de postgresql-server-dev-9.3 (9.3.11-1.pgdg80+1) ...
Paramétrage de postgresql-server-dev-9.4 (9.4.6-1.pgdg80+1) ...
Paramétrage de postgresql-server-dev-9.5 (9.5.1-1.pgdg80+1) ...
Paramétrage de postgresql-server-dev-all (172.pgdg80+1) ...
Traitement des actions différées (« triggers ») pour libc-bin (2.19-18+deb8u3) ...


modifier le fichier de configuration de postgresql, pour permettre les connections distantes
ceci n'est strictement pas conseillé sur une machine de production

# sudo sed -i "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" \
#      /etc/postgresql/9.3/main/postgresql.conf

l'utilisateur pouvant se connecter a la console postgresql: postgres
apres une nouvelle installation, cet utilisateur sera créé
Cet utilisateur sera utilisé pour une connection via la console


# # Switch to user "postgres"
# sudo su postgres

# # Enter psql, the CLI tool for Postgres
# psql

Pour se connecter depuis une appli web,
il est preferable de créer un autre utilisateur.

A user is a "role" that can log into the system.
A "role" is a database object that:
  - can own other objects
  - has privileges

postgres=# select * from pg_roles ;


# créer un utilisateur systeme
# useradd tom
# definir son mot de passe
# passwd tom

ensuite, il faut creer un utilisateur au niveau de postgresql,
cet utilisateur correspondra a l'utilisateur systeme créé plus haut

# se connecter en tant que postgres
# sudo su postgres
# creer un utilisateur correspondant a tom
# createuser -P tom

# on peut creer un nouvel utilisateur en envoyant une requete sql au moteur
# toujours avec l'utilisateur system postgres
# psql -c "CREATE ROLE myloginuser LOGIN UNENCRYPTED PASSWORD 'somepassword' NOSUPERUSER INHERIT NOCREATEDB NOCREATEROLE NOREPLICATION;"

# juste au cas ou, pour modifier le password d'un user
# psql -c "psql -c "alter user myloginuser with password 'somepassword';"

# creer une base de donnée pour le nouvel utilisateur
# en tant que user postgres, via la console shell
# createdb --owner=tom tom_database


-------------
CONFIGURATION
-------------

* linux configuration
---------------------

- Turn off the OOM killer, it's a bug, not a feature.
- use ext4 or xfz filesystem
- set SHMMAX and SHMALL (debian specific):
  # sysctl -w kernel.shmmax=17179869184
  # sysctl -w kernel.shmall=4194304

  # # or
  # echo 17179869184 >/proc/sys/kernel/shmmax
  # echo 4194304 >/proc/sys/kernel/shmall

* Postgresql configuration
--------------------------

- logging:
  log_destination = 'csvlog'
  log_directory = 'pg_log'
  logging_collector = on
  log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
  log_rotation_age = 1d
  log_rotation_size = 1GB
  log_min_duration_statement = 250ms
  log_checkpoints = on
  log_connections = on
  log_lock_waits = on
  log_temp_files = 0

- resources:
  shared_buffers = 2GB # 25% memory to 8GB
  work_mem = 160MB # (2*RAM)/max_connections)
  maintenance_work_mem = 500MB # RAM/16
  effective_cache_size = 4GB # RAM / 2
  max_connections = 100 # no more than 400 || >400 => frontend pooler

- checkpoints: flush of dirty buffers from memory to disk.
  checkpoint_segments = 32 # 32 to start, then look at the logs
  checkpoint_timeout = 5min # 10-30min depends on restart time
  checkpoint_completion_target = 0.9

- planner: the planner is ...
  effective_io_concurrency = number of i/o channels of ignore it
  random_page_cost = 3.0 for a typical RAID10 array, 2.0 for a SAN

* Easy performance boost
------------------------

- general system stuff
  do not run anything besides postgresql on the host

- stupid database tricks (don't do that)
  sessions in db
  constantly updated accumulator records
  task queues in db
  using db as a filesystem
  very long running transactions

  using insert instead of copy for bulk loading data
  unanchored text queries like '%this%'; use the built in full text search


-------------------
IMPORTANT A SAVOIR:
-------------------

peer authentication:
--------------------
postgres demandera au systeme hote le login et s'en servira pour l'authentification.
Cela signifie que pour se connecter en tant que tom en utilisant le peer authentication,
il faut d'abord se connecter au systeme en tant que tom, puis se connecter a postgresql

Ceci est possible grace a une ligne ds le fichier /etc/postgresql/version/main/pg_hba.conf
local   all             all                                     peer

grossierement: tous les utilisateurs, ont le droit de se connecter a ttes les bdd,
en utilisant des unix sockets, et en utilisant le peer authentication.

Pour pouvoir se connecter a postgresql en tant que tom,
alors que l'on est connecté avec un utilisateur systeme qui n'est pas tom,

# psql -U tom -h localhost -W

Ceci est possible grace a une ligne ds le fichier /etc/postgresql/version/main/pg_hba.conf
# host    all             all             127.0.0.1/32            md5

Ce qui signifie grossierement: tous les utilisateurs ont le droit de se connecter a ttes les bdd,
en utilisant une connection tcp (et non via unix socket), sur le localhost:127.0.0.1/32,
le mot de passe sera demandé et pas envoyé en clair grace a md5.

le shell psql:
--------------

postgres=# \list
List of databases
Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges
-----------+----------+----------+-------------+-------------+-----------------------
postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
          |          |          |             |             | postgres=CTc/postgres
template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +
          |          |          |             |             | postgres=CTc/postgres
wappa     | wappa    | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
(4 rows)

postgres=#

Les bases de données template1 et template0 sont des bases de données qui serviront de
modèles chaque fois que l'on tapera la commande createdb ou la commande create database.

Ces bases sont "copiées", chaque fois que l'on crée une base de donées. Heum, par defaut,
c'est template1 qui est copiée, mais l'on peut preciser laquelle des deux utiliser pour la
copie

# CREATE DATABASE dbname TEMPLATE template0; -- depuis une console psql
# createdb -T template0 dbname # depuis le shell linux

-------------


Inside a single postgresql server, there is tables grouped in databases, grouped in cluster.


- Retrouver la liste des roles:
-------------------------------

postgres=# select rolname from pg_roles;
 rolname
----------
 wappa
 postgres
(2 lignes)

postgres=# \dg
                                    Liste des roles
 Nom du role |                          Attributs                           | Membre de
-------------+--------------------------------------------------------------+-----------
 postgres    | Superutilisateur, Creer un role, Creer une base, Réplication | {}
 wappa       |                                                              | {}


- Roles, databases
------------------

postgres=# select datname, datdba from pg_database;
  datname  | datdba
-----------+--------
 template1 |     10
 template0 |     10
 postgres  |     10
 wappa     |  16384
(4 lignes)

postgres=# select rolname, datname
postgres-# from pg_roles, pg_database
postgres-# where pg_roles.oid = pg_database.datdba;
 rolname  |  datname
----------+-----------
 wappa    | wappa
 postgres | template1
 postgres | template0
 postgres | postgres
(4 lignes)

postgres=#


COMMENT CREER SON PROPRE CLUSTER
--------------------------------

A database cluster is a collection of databases that is managed
by a single instance of a running database server.

- Pour creer un cluster, saisir les commandes:

# mkdir -p /usr/local/pgsql/{data,log,run}
# chown -R postgres /usr/local/pgsql
#
# su postgres
$ pg_createcluster -d /usr/local/pgsql/data/ 9.4 test_cluster
Creating new cluster 9.4/test_cluster ...
  config /etc/postgresql/9.4/test_cluster
  data   /usr/local/pgsql/data/
  locale fr_FR.utf-8
Drapeaux de /usr/local/pgsql/data/ initialisés comme -------------e-C
  port   5433

There is some other default:
- log: /var/log/postgresql/postgresql-9.4-test_cluster.log
- run: /var/run/postgresql/9.4-test_cluster.pid

- Pour demarrer le nouveau cluster (dans une console):
$ pg_ctlcluster 9.4 test_cluster start --foreground
2015-09-25 06:18:40 GMT [3110-1] LOG:  le système de bases de données a été arrêté à 2015-09-25 06:18:32 GMT
2015-09-25 06:18:40 GMT [3110-2] LOG:  MultiXact member wraparound protections are now enabled
2015-09-25 06:18:40 GMT [3109-1] LOG:  le système de bases de données est prêt pour accepter les connexions
2015-09-25 06:18:40 GMT [3114-1] LOG:  lancement du processus autovacuum

- Et dans une autre console:
# su postgresql
$ postgres@kintanu:~$ psql -p 5433 # connection a un cluster different du cluster par defaut
psql (9.4.4)
Saisissez « help » pour l'aide.

postgres=# \d
Aucune relation trouvée.
postgres=#


####

- how to create a primary key auto increment
create table customer (
       id serial primary key,
       name varchar(15) not null,
       address varchar(15) not null
);

- how to create a function to generate pseudo-random unique values:
CREATE OR REPLACE FUNCTION pseudo_encrypt(VALUE int) returns int AS $$
DECLARE
l1 int;
l2 int;
r1 int;
r2 int;
i int:=0;
BEGIN
 l1:= (VALUE >> 16) & 65535;
 r1:= VALUE & 65535;
 WHILE i < 3 LOOP
   l2 := r1;
   r2 := l1 # ((((1366 * r1 + 150889) % 714025) / 714025.0) * 32767)::int;
   l1 := l2;
   r1 := r2;
   i := i + 1;
 END LOOP;
 RETURN ((r1 << 16) + l1);
END;
$$ LANGUAGE plpgsql strict immutable;

- Then, use the function in a create table statement:
create table credit_card (
       id serial primary key,
       credit_card_number bigint default pseudo_encrypt(nextval('my_seq')::int),
       max_amount bigint not null default 300000,
       expiring_date timestamp with time zone
);

- how to create a foreign key
create table account(
       id serial primary key,
       account_number bigint default pseudo_encrypt(nextval('my_seq')::int),
       credit_card_id bigint references credit_card(id)
);

- another example:
create table transaction (
       id serial primary key,
       amount bigint not null,
       customer_id bigint references customer(id),
       account_id bigint references account(id)
);

###

- HOW TO DUMP A DATABASE, SEE MAN PG_DUMP OR MAN PG_DUMPALL
-----------------------------------------------------------
pg_dump --schema=masters oldDB > masters1.sql


- HOW TO RESTORE A DATABASE
---------------------------
cat masters1.sql | psql newDB


- HOW TO IMPORT CSV, INSIDE PSQL PROMPT
---------------------------------------
copy users (id, name, address) from '/path/to/csv/file.csv' delimiter ',';



INDEXES:
--------
- clustered index:
  les données sont stockées "dans un ordre bien distinct" sur le disque.
  Uniquement un seul par table, car on ne peut ordonner que suivant un seul critere.
  Caveat: demande du temps a l'ecriture, car les données doivent etre reordonnées.
  Avantages: temps de lecture de la table: court.

- non clustered index:
  conservent une liste contenant des pointeurs vers les données sur le disques.
  Possible d'en avoir plusieurs par table.
  Caveat: each new index will increase the time it takes to write new records.


HOW INDEXES WORK:
-----------------
On va utiliser la table suivante:

CREATE TABLE users (
    id integer NOT NULL,
    first_name character varying(60),
    last_name character varying(60),
    email character varying(160),
    gender character varying(6),
    created_at date
);

Commençons par analyser le plan d'execution de la requete select all.
Pour cela, on va utiliser la commande explain.

postgres=# explain select * from users;
                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on users  (cost=0.00..20.00 rows=1000 width=48)
(1 ligne)

Cout estimé pour cette requete: sensiblement de 0 à 20.

Analysons ensuite le plan d'execution de la meme requete, avec une clause where

postgres=# explain select * from users where email = 'phughes5@nbcnews.com';
                        QUERY PLAN
----------------------------------------------------------
 Seq Scan on users  (cost=0.00..22.50 rows=1 width=48)
   Filter: ((email)::text = 'phughes5@nbcnews.com'::text)
(2 lignes)

Cout estimé pour cette requete: sensiblement 0 à 22.50. Le cout est devenu plus elevé, mince.

Ajoutons un index sur la colonne email, grace a la commande create index
postgres=# create index email_idx on users using btree(email);
postgres=# explain select * from users where email = 'phughes5@nbcnews.com';
                              QUERY PLAN
----------------------------------------------------------------------
Index Scan using email_idx on users  (cost=0.28..8.29 rows=1 width=48)
  Index Cond: ((email)::text = 'phughes5m@nbcnews.com'::text)

Le cout vient de passer de 22.50 à 8.29, grace a l'index, la requete est plus performante.


SQL PERFORMANCE OF JOIN AND WHERE EXISTS
----------------------------------------
postgres=# create extension pgcrypto; -- pour pouvoir utiliser la fonction  gen_salt

postgres=# -- CREATION D'UNE TABLE PRODUCT
postgres=# create table p(
  p_id serial primary key,
  p_name varchar unique
);

postgres=# -- INSERTION DE VALEURS ALEATOIRES A PARTIR D'UNE SERIE
postgres=# insert into p (p_name) select substr(gen_salt('md5'), 4) from generate_series(1, 1000000);


postgres=# -- CREATION D'UNE TABLE ORDER, UN PRODUIT PEUT APPARAITRE DANS +IEURS COMMANDES
postgres=# create table o (o_id serial primary key, p_id integer references p (p_id));


postgres=# -- INSERTION DE VALEURS ALEATOIRES
postgres=# insert into o (p_id)
postgres-# select rnd_val
postgres-# from (select trunc(random() * 249999 + 1)::int as rnd_val
postgres(#       from generate_series(1, 1000000)) as gen;


postgres=# -- CREATION D'UN INDEX SUR LA COLONNE P_ID DE LA TABLE O
postgres=# create index p_idx on o using btree(p_id);


postgres=# -- ANALYSE DU COUT D'UNE JOINTURE
postgres=# explain analyze select p_name from p join o using(p_id);
Merge Join  (cost=5.88..64611.19 rows=1000000 width=9) (actual time=0.065..1138.921 rows=1000000 loops=1)
   Merge Cond: (p.p_id = o.p_id)
   ->  Index Scan using p_pkey on p  (cost=0.42..31389.42 rows=1000000 width=13) (actual time=0.021..72.036 rows=250000 loops=1)
   ->  Index Only Scan using p_idx on o  (cost=0.42..43680.40 rows=1000000 width=4) (actual time=0.035..794.401 rows=1000000 loops=1)
         Heap Fetches: 1000000
 Planning time: 0.575 ms
 Execution time: 1191.973 ms
(7 lignes)


postgres=# -- COMPARONS LE COUT DE LA JOINTURE AVEC CELUI D'UNE CLAUSE WHERE EXISTS
postgres=# explain analyze select count(p_name) from p where exists (select 1 from o where p.p_id = o.p_id);
Aggregate  (cost=65126.32..65126.33 rows=1 width=9) (actual time=1106.187..1106.187 rows=1 loops=1)
   ->  Merge Semi Join  (cost=5.88..64611.19 rows=206053 width=9) (actual time=0.060..1078.128 rows=245450 loops=1)
         Merge Cond: (p.p_id = o.p_id)
         ->  Index Scan using p_pkey on p  (cost=0.42..31389.42 rows=1000000 width=13) (actual time=0.020..73.441 rows=250000 loops=1)
         ->  Index Only Scan using p_idx on o  (cost=0.42..43680.40 rows=1000000 width=4) (actual time=0.031..802.883 rows=1000000 loops=1)
               Heap Fetches: 1000000
 Planning time: 0.533 ms
 Execution time: 1094.585 ms


A RETENIR:
----------
EXISTS is used to return a boolean value, JOIN returns a whole other table

EXISTS is only used to test if a subquery returns results,
and short circuits as soon as it does.
JOIN is used to extend a result set by combining it with
additional fields from another table to which there is a relation.

In general, use EXISTS when:

    You don't need to return data from the related table
    You have dupes in the related table (JOIN can cause duplicate rows if values are repeated)
    You want to check existence (use instead of LEFT OUTER JOIN...NULL condition)

If you have proper indexes, most of the time the EXISTS will perform identically to the JOIN.
The exception is on very complicated subqueries, where it is normally quicker to use EXISTS.

If your JOIN key is not indexed,
it may be quicker to use EXISTS but you will need to test for your specific circumstance.

JOIN syntax is easier to read and clearer normally as well.
