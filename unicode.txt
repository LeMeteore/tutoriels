Introduction a unicode:
-----------------------


1. tout est octet:
------------------
l'informatique moderne ne fonctionne qu'avec des octets.
on n'envoie pas du texte, on envoie des octets,
on ne stocke pas du texte, on stocke des octets,
tout est octet.


trois niveaux d'abstraction
---------------------------
- display: glyphes, polices
- texte: code points
- stockage: octets


il a donc fallu que l'on se mette d'accord sur une convention:
quand je t'envoie cette 'serie d'octets', cela signifie que j'ai voulu dire 'ceci'.
faire correspondre: 'serie d'octets' --> caracteres comprehensibles par l'homme.
ceci a donné naissance aux systemes d'encodages; ASCII, ISO-8859-1, Windows-1252, ...


2. le monde a besoin de plus de 256 carateres:
----------------------------------------------
differents alphabets, caracteres, symboles, a travers le monde.


unicode != utf-8:
-----------------
unicode: mapping entre le caractere et la description.
utf-8: mapping entre la description et la serie d'octets.


objectif:
- faire correspondre chaque caractere a un code point
- associer a chaque code point, une description du caratere
- faire correspondre au code point, un ou plusieurs octets <= 4


exemple:

unicode
----------------------------------
a --> U+0061: LATIN SMALL LETTER A --> 01100001
      -----------------------------------------
                                          utf-8

l'encodage de caractere dominant: utf-8.
universal character set transformation format 8 bits

differents 'code points' peuvent avoir differents nombres d'octets,
contrairement a ASCII où le nombre d'octet etait fixe par caractere: 1,
U+2602: UMBRELLA, utilise 3 octets.


python2
-------
- string data types:
type str, une sequence d'octets
type unicode, une sequence de code points (prefixe u)

python3
-------
- string data types:
type str, une sequence de code points
type bytes, une sequence d'octets (prefixe b)


illustration 'str' et 'unicode' sous python2
--------------------------------------------
>>> euro_octet = '€'
>>> type(euro_octet)
<type 'str'>
>>> len(euro_octet)
3
>>>
>>> euro_unicode = u'\u20ac'
>>> print(euro_unicode)
€
>>> type(euro_unicode)
<type 'unicode'>
>>> len(euro_unicode)
1
>>>


en python2, lorsqu'on parle de string, on pense generalement,
a bytes string, chaine d'octets.


comment passer d'un type a un autre?
------------------------------------
>>> my_unicode = u"\u2602"
>>> len(my_unicode) # my_unicode ne possede qu'un seul caractere
1
>>> type(my_unicode) # my_unicode est de type unicode
<type 'unicode'>
>>>
>>> print(my_unicode) # devrait vous afficher un parapluie
>>> ☂
>>>
>>> my_utf8 = my_unicode.encode("utf-8") # encode pour passer de unicode a str
>>> len(my_utf8) # my_unicode possede trois octets
3
>>> type(my_utf8) # my_utf8 est de type str, chaine d'octets
<type 'str'>
>>>
>>> my_utf8
'\xe2\x98\x82'
>>>
>>>
>>> my_utf8.decode("utf-8") # decode pour passer de str a unicode
u'\u2602'
>>>

une maniere de retenir peut etre celle là:
------------------------------------------
de str a unicode: become code > be-code > 'decode'
de unicode a str: not be code > un-code > 'encode'


Ressource interessante: sur youtube, "Travis Fischer, Esther Nam: Character encoding and Unicode in Python - PyCon 2014""


Sous Python 3:
--------------
- il n'existe que deux types pour les chaines de caracteres
  - classe bytes: b'foo'
  - class unicode 'foo'

exemples:

>>> u = "patrick"
>>> type(u)
<class 'str'>
>>> b
b'patrick'
>>> type(b)
<class 'bytes'>
>>>
>>> u = str(10)
>>> type(u)
<class 'str'>
>>> b = bytes(10)
>>> type(b)
<class 'bytes'>
>>> b
b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
>>> u
'10'
>>>
>>> list('foo')
['f', 'o', 'o']
>>> list(b'foo')
[102, 111, 111]
>>> 'foo' == b'foo'
False
>>>
>>> # on peut toujours formatter, meme avec des bytes
>>> b = b'foo'
>>> print("%s" % b)
b'foo'
>>> "{}".format(b)
"b'foo'"
>>> on ne peut pas modifier un tableau de bytes
>>> b[0] = 1
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'bytes' object does not support item assignment
>>>
>>> # en fait, il exite un autre type pour jouer avec des tableaux modifiables d'octets
>>>
>>> b = bytearray()
>>> type(b)
<class 'bytearray'>
>>> help(b)
Help on bytearray object:

class bytearray(object)
 |  bytearray(iterable_of_ints) -> bytearray
 |  bytearray(string, encoding[, errors]) -> bytearray
 |  bytearray(bytes_or_buffer) -> mutable copy of bytes_or_buffer
 |  bytearray(int) -> bytes array of size given by the parameter initialized with null bytes
 |  bytearray() -> empty bytes array
 |
 |  Construct an mutable bytearray object from:
 |    - an iterable yielding integers in range(256)
 |    - a text string encoded using the specified encoding
 |    - a bytes or a buffer object
 |    - any object implementing the buffer API.
 |    - an integer
 |

>>> dir(b)
['__add__', '__alloc__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'capitalize', 'center', 'clear', 'copy', 'count', 'decode', 'endswith', 'expandtabs', 'extend', 'find', 'fromhex', 'hex', 'index', 'insert', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'pop', 'remove', 'replace', 'reverse', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
>>>


- le systeme d'encodage par defaut depend de l'os

>>> import sys
>>> sys.getdefaultencoding()
'utf-8'

Misc:
-----
Toujours ouvrir un fichier de cette maniere:
>>> with open(filename, 'r', encoding='utf-8') as f:
