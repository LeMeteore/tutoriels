Lu sur stackoverflow :)

""Git is a saw with no guard that makes it easy to cut your own arm off.
But it also comes with an easy arm reattachment kit,
and you can even attach the arm to your knee if you want."

Git est un outil parfois tres etrange.
Je ne chercherai pas a le maitriser, juste a m'en servir du mieux que je peux.
En bas, une liste de problemes/soucis avec la solution correspondante.

Erreur:
-------
Your configuration specifies to merge with the ref 'master'
from the remote, but no such ref was fetched.

J'ai eu cette erreur apres avoir fait un git pull.
Git ne savait pas a partir de quelle url il doit faire le pull.

Solution:
---------
editer le fichier .git/config
et ajouter la ligne 'remote = origin' dans la section branch "master"

[branch "master"]
        remote = origin

Souci:
------
Ne pousser que certains commits.
J'ai une longue liste de commits en local,
je veux git push une partie de ces commits.

Solution a:
-----------
$ git push origin master~3:master

Solution b:
-----------
$ git checkout -b tocommit HEAD~3
$ git push origin tocommit:master

Solution c:
-----------
$ git checkout -b tocommit
$ git checkout master
$ git merge tocommit~3
$ git push origin master:master

Solution d:
-----------
$ git push SHA:master

Souci:
------
git ne me dit pas de combien de commits je suis en avance/retard.
Pas encore bien saisi, mais ça doit etre parce qu'il ne sait pas,
quel est le upstream.

Solution:
---------
changer la valeur de remote. Remplacer le '.' par le nom du upstream.
[branch "ppv"]
        remote = origin
        merge = refs/heads/ppv

Souci:
------
Mon espace de travail n'a aucune modification, et pourtant git se plaint:

error: Your local changes to the following files would be overwritten by merge:
        fichier.txt
Please, commit your changes or stash them before you can merge.
Aborting

Solution:
---------
j'avais fait un git update-index --assume-unchanged fichier.txt
il fallait donc faire un git update-index --no-assume-unchanged fichier.txt,
et ensuite faire ou un commit, ou un stash, ou un checkout.

Souci:
------
Ne vouloir ajouter que certaines modifications d'un fichier, pas toutes.

Solution:
---------
git add -i filename.
un shell special apparaitra, il est assez intuitif.
En gros, il faut, patch, selectionner un fichier,
eventuellement choisir les morceaux a ajouter, etc ...

Souci:
------
Vouloir renommer un fichier.

Solution:
---------
git mv

Souci: Your branch and 'origin/master' have diverged:
-----------------------------------------------------
diverge est assez parlant je pense. ce qui arrive souvent
quand par exemple, quelqu'un a fait un push sur le depot.
ou bien quand j'ai fait un git commit --amend, alors que
j'ai deja fait git push du commit que je suis entrain de amend :(

Solution:
---------
git merge origin/master pour fusionner le upstream avec le local,
et creer un commit resultant du merge.

git rebase origin/master pour appliquer les modifications en local,
sur les modifications en upstream. Autre topo: git pull --rebase,
grossierement: "applique mes modifs au dessus de celles qui sont en upstream
apres avoir fait un pull"

Souci:
------
Je veux voir un diff complet, et pas seulement les fichiers modifiés,
a l'interieur de mon template de commit.

Solution:
---------
git commit --verbose
je peux alors ecrire mon message de commit en voyant exactement
ce que j'ai modifié et ainsi me souvenir de quoi/pourquoi.


Probleme:
---------
Copier un fichier ou un repertoire d'une branche a une autre

Solution:
---------
En considerant que je suis sur une branche autre que dev:
git checkout dev -- path/to/your/file
git checkout dev -- path/to/your/folder


Souci:
------
You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.

Solution:
---------
Cela signifie simplement que le HEAD pointe sur un commit qui n'est
référencé ni par un tag, ni par une branche. exemple:

HEAD est maintenant sur 8b409dc... initial
~/GITHUB/example (8b409dc)
⇒

N'ayant ni nom de branche, ni nom de travail referençant le commit actuel,
et bien, c'est le hash du commit qui est affiché entre les parentheses.
