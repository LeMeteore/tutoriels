# install gnupg
# apt-get install gnupg

# generate a priv key
# gpg --gen-key

# verify generated key
# gpg --list-keys

# generate a revokation key,
# this operation should absolutely be done after generating a key
# gpg --output myrevoke.key --gen-revoke  EE6E8046

# generate pub key to a text file
# gpg -armor --output pubkey.txt --export Nsukami

# send pub key to public server
# gpg --send-keys --keyserver a.key.server.url E4635BBE
# or go to http://pgp.mit.edu/ and copy paste the content of pubkey.txt

# retrieve pubkey of friend
# go there: http://pgp.mit.edu/ and search for a string

# import pubkey of your friend
# gpg --import friend_pubkey.txt

# or you can ask directly to the key server
# gpg --search-keys --keyserver pgp.mit.edu 'friend name or frien email'

# encrypt the file you want to share
# gpg --encrypt --recipient friend@email.org bonjour.txt

# encrypt a message
# echo "Slt" | gpg --encrypt --armor -r elwan7@gmail.com
# echo "Slt" | gpg --sign --encrypt --armor -r elwan7@gmail.com

# send file per email or whatever
# the file should be bonjour.txt.gpg

# before deleting a key, you should:
# first, revoke key locally
# gpg --import myrevoke.key

# then inform everybody else key is revoked
# gpg ---send-keys --keyserver hkp://subkeys.pgp.net EE6E8046

# then delete it
# gpg --delete-secret-and-public-key keyname


# backup pubkey
# gpg -ao mypub.key --export EE6E8046

# backup privkey
# gpg -ao mypriv.key --export-secret-keys EE6E8046

# on a new machine, or after a fresh install
# restore your keys
# gpg --import mypriv.key
# gpg --import mypub.key

# revoking keys means
# you are not longer going to be using this key in future
# and would like to inform people on the Internet also.


# refresh your keys: get new keys from server
# and install locally
# to be sure, you have the latest keys of your friends
# gpg --refresh-keys --keyserver hkp://subkeys.pgp.net


# Description of some fields

pub   4096R/29BB17B9 2014-08-21 [expire : 2024-08-18]
uid                  keybase.io/knibals <knibals@keybase.io>
sub   4096R/81371D20 2014-08-21 [expire : 2024-08-18]

----------------------------

4096 == the bit length of the key
RSA == R
DSA == D
Elgamal == g (only seen in subkeys)

Historically there was a "G" for an Elgamal key that could both encrypt and sign,
but that was dropped from OpenPGP. The current lowercase "g" Elgamal is an encrypt-only key.

----------------------------

sub   4096R/81371D20 2014-08-21 [expire : 2024-08-18]

Sub is for subkeys. They are other keys that go along with the main, or primary, key.
A common usage pattern is for the primary to be used for signing,
and the subkey used to encryption.

> 3) Some keys have several uid lines, is there a maximum or minimum
> number here? It looks like a number of email addresses attached to the
> key, is this correct?

----------------------------

uid                  keybase.io/knibals <knibals@keybase.io>

There is a minimum of 1 uid. There is no maximum.
There are also "uat" lines, of which there are zero or more.
A uat is used to store other things aside from text (for example, photo IDs).

----------------------------

> 4) I only have one public keyring, but I assume that it is possible to
> have several? If so will the -k command list these after each other?
> The first output line seems to be the actual keyring location.

It is possible to have several.
